import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
from functions import QRCodeFunctions


class FibonacciScanGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Fibonacci Scan")
        self.functions = QRCodeFunctions(self)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.root.attributes('-fullscreen', True)

        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
        self.bg_color = "#0f0f23"
        self.card_color = "#1a1a2e"
        self.accent_color = "#6366f1"
        self.secondary_accent = "#818cf8"
        self.text_color = "#e2e8f0"
        self.secondary_text = "#94a3b8"
        self.border_color = "#0f0f23"
        self.success_color = "#10b981"
        self.warning_color = "#f59e0b"

        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.gradient_start = "#6366f1"
        self.gradient_end = "#8b5cf6"

        # –®—Ä–∏—Ñ—Ç—ã
        self.title_font = ('Arial', 24, 'bold')
        self.subtitle_font = ('Arial', 16)
        self.app_font = ('Arial', 13)
        self.button_font = ('Arial', 12, 'bold')
        self.small_font = ('Arial', 11)
        self.mono_font = ('Courier New', 10)

        # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.current_section = "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        self.setup_styles()

    def setup_styles(self):
        # –°—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        style = ttk.Style()
        style.theme_use('clam')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style.configure('Custom.TNotebook', background=self.card_color, borderwidth=0)
        style.configure('Custom.TNotebook.Tab',
                        background="#1a1a2e",
                        foreground=self.text_color,
                        padding=[15, 8],
                        font=self.small_font)
        style.map('Custom.TNotebook.Tab',
                  background=[('selected', self.card_color)],
                  foreground=[('selected', self.accent_color)])

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure('Accent.TButton',
                        background=self.accent_color,
                        foreground='white',
                        borderwidth=0,
                        font=self.button_font,
                        padding=(15, 8))
        style.map('Accent.TButton',
                  background=[('active', '#4f46e5')])

        style.configure('Secondary.TButton',
                        background='#1a1a2e',
                        foreground=self.text_color,
                        borderwidth=0,
                        font=self.button_font,
                        padding=(15, 8))
        style.map('Secondary.TButton',
                  background=[('active', '#374151')])

        style.configure('Success.TButton',
                        background=self.success_color,
                        foreground='white',
                        borderwidth=0,
                        font=self.button_font,
                        padding=(15, 8))
        style.map('Success.TButton',
                  background=[('active', '#059669')])

    def setup_ui(self):
        self.root.configure(bg=self.bg_color)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–µ–Ω—å—é
        main_container = tk.Frame(self.root, bg=self.bg_color)
        main_container.pack(fill="both", expand=True, padx=20, pady=20)

        # –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        content_wrapper = tk.Frame(main_container, bg=self.bg_color)
        content_wrapper.pack(fill="both", expand=True, pady=(20, 0))

        # –°–∞–π–¥–±–∞—Ä
        self.setup_sidebar(content_wrapper)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.setup_main_area(content_wrapper)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.show_section(self.current_section)

    def setup_app_header(self, parent):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        header_frame = tk.Frame(parent, bg=self.bg_color, height=80)
        header_frame.pack(fill="x", pady=(0, 20))
        header_frame.pack_propagate(False)

        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        gradient_canvas = tk.Canvas(header_frame, bg=self.bg_color, highlightthickness=0)
        gradient_canvas.pack(fill="both", expand=True)

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        width = header_frame.winfo_reqwidth()
        for i in range(width):
            ratio = i / width
            r = int(int(self.gradient_start[1:3], 16) * (1 - ratio) + int(self.gradient_end[1:3], 16) * ratio)
            g = int(int(self.gradient_start[3:5], 16) * (1 - ratio) + int(self.gradient_end[3:5], 16) * ratio)
            b = int(int(self.gradient_start[5:7], 16) * (1 - ratio) + int(self.gradient_end[5:7], 16) * ratio)
            color = f"#{r:02x}{g:02x}{b:02x}"
            gradient_canvas.create_line(i, 0, i, 80, fill=color)

        # –¢–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        title_text = "Fibonacci Scan"
        subtitle_text = "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ —Å–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–æ–≤"

        title_label = tk.Label(gradient_canvas, text=title_text,
                               bg=self.bg_color, fg="white",
                               font=('Arial', 28, 'bold'),
                               compound='center')
        title_label.place(relx=0.5, rely=0.4, anchor='center')

        subtitle_label = tk.Label(gradient_canvas, text=subtitle_text,
                                  bg=self.bg_color, fg=self.secondary_text,
                                  font=self.subtitle_font,
                                  compound='center')
        subtitle_label.place(relx=0.5, rely=0.7, anchor='center')

    def setup_sidebar(self, parent):
        sidebar = tk.Frame(parent, bg=self.card_color, width=300)
        sidebar.pack(side="left", fill="y", padx=(0, 20))
        sidebar.pack_propagate(False)

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å–∞–π–¥–±–∞—Ä–∞
        top_sidebar = tk.Frame(sidebar, bg=self.card_color)
        top_sidebar.pack(fill="x", pady=(20, 30), padx=20)

        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        logo_frame = tk.Frame(top_sidebar, bg=self.card_color)
        logo_frame.pack(fill="x", pady=(0, 30))

        # –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        icon_label = tk.Label(logo_frame, text="üî∑", bg=self.card_color,
                              fg=self.accent_color, font=('Arial', 32))
        icon_label.pack(side="left", padx=(0, 10))

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        name_frame = tk.Frame(logo_frame, bg=self.card_color)
        name_frame.pack(side="left", fill="y")

        tk.Label(name_frame, text="FIBONACCI", bg=self.card_color,
                 fg=self.accent_color, font=('Arial', 18, 'bold')).pack(anchor="w")
        tk.Label(name_frame, text="SCAN", bg=self.card_color,
                 fg=self.text_color, font=('Arial', 18, 'bold')).pack(anchor="w")

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(top_sidebar, height=2, bg=self.border_color)
        separator.pack(fill="x", pady=(0, 20))

        # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_frame = tk.Frame(top_sidebar, bg=self.card_color)
        nav_frame.pack(fill="x")

        nav_items = [
            ("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR", "", ""),
            ("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "", "")
        ]

        self.nav_buttons = []
        for item, icon, description in nav_items:
            btn_container = tk.Frame(nav_frame, bg=self.card_color)
            btn_container.pack(fill="x", pady=8)

            btn = tk.Button(btn_container,
                            text=f"   {icon}  {item}",
                            font=self.button_font,
                            bg=self.card_color,
                            fg=self.secondary_text,
                            bd=0,
                            activebackground="#252525",
                            activeforeground=self.accent_color,
                            padx=15,
                            pady=12,
                            anchor="w",
                            highlightthickness=0,
                            command=lambda n=item: self.show_section(n))
            btn.pack(fill="x")

            # –û–ø–∏—Å–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
            desc_label = tk.Label(btn_container, text=description,
                                  bg=self.card_color, fg=self.secondary_text,
                                  font=('Arial', 9), anchor="w", justify="left")
            desc_label.pack(fill="x", padx=(45, 0), pady=(2, 0))

            self.nav_buttons.append(btn)

        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Å–∞–π–¥–±–∞—Ä–∞
        bottom_sidebar = tk.Frame(sidebar, bg=self.card_color)
        bottom_sidebar.pack(side="bottom", fill="x", pady=20, padx=20)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = tk.Frame(bottom_sidebar, bg=self.card_color)
        stats_frame.pack(fill="x", pady=(0, 15))

        tk.Label(stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", bg=self.card_color,
                 fg=self.text_color, font=self.small_font).pack(anchor="w")

        stats_text = tk.Label(stats_frame, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: 0 | –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: 0",
                              bg=self.card_color, fg=self.secondary_text,
                              font=('Arial', 9))
        stats_text.pack(anchor="w", pady=(2, 0))

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        exit_btn = tk.Button(bottom_sidebar, text="–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                             bg="#dc2626",
                             fg="white",
                             font=self.button_font,
                             bd=0,
                             command=self.root.quit,
                             padx=15,
                             pady=12)
        exit_btn.pack(fill="x")

    def setup_main_area(self, parent):
        self.main_area = tk.Frame(parent, bg=self.bg_color)
        self.main_area.pack(side="right", fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        self.header_frame = tk.Frame(self.main_area, bg=self.bg_color)
        self.header_frame.pack(fill="x", pady=(0, 20))

        self.section_title = tk.Label(self.header_frame, text=self.current_section,
                                      bg=self.bg_color, fg=self.text_color, font=self.title_font)
        self.section_title.pack(side="left")

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        indicator = tk.Frame(self.header_frame, height=3, bg=self.accent_color, width=100)
        indicator.pack(side="left", padx=(15, 0), pady=(5, 0))

        # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_frame = tk.Frame(self.main_area, bg=self.bg_color)
        self.content_frame.pack(fill="both", expand=True)

        # –û–±–ª–∞—Å—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.preview_frame = tk.Frame(self.content_frame, bg=self.card_color,
                                      padx=25, pady=25)
        self.preview_frame.pack(side="right", fill="both", expand=True, padx=(20, 0))

        # –û–±–ª–∞—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_frame = tk.Frame(self.content_frame, bg=self.card_color,
                                       width=400, padx=25, pady=25)
        self.settings_frame.pack(side="left", fill="y")
        self.settings_frame.pack_propagate(False)

    def setup_generator_ui(self):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.settings_frame.winfo_children():
            widget.destroy()
        for widget in self.preview_frame.winfo_children():
            widget.destroy()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.section_title.config(text="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ QR
        self.setup_generator_settings()

        # –ü–∞–Ω–µ–ª—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.setup_preview_ui()

    def setup_generator_settings(self):
        settings_container = tk.Frame(self.settings_frame, bg=self.card_color)
        settings_container.pack(fill="both", expand=True)

        # Notebook –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        style = ttk.Style()
        style.configure("Custom.TNotebook.Tab", padding=[20, 8], font=self.small_font)

        settings_notebook = ttk.Notebook(settings_container, style="Custom.TNotebook")

        # –í–∫–ª–∞–¥–∫–∞ "–î–∏–∑–∞–π–Ω"
        design_frame = tk.Frame(settings_notebook, bg=self.card_color)
        settings_notebook.add(design_frame, text="–î–∏–∑–∞–π–Ω")

        # –¶–≤–µ—Ç–∞
        color_frame = tk.Frame(design_frame, bg=self.card_color)
        color_frame.pack(fill="x", pady=(0, 20))

        tk.Label(color_frame, text="–¶–í–ï–¢–ê QR-–ö–û–î–ê", bg=self.card_color, fg=self.secondary_text,
                 font=('Arial', 10, 'bold')).pack(anchor="w", pady=(0, 10))

        color_grid = tk.Frame(color_frame, bg=self.card_color)
        color_grid.pack(fill="x")

        tk.Label(color_grid, text="–¶–≤–µ—Ç –∫–æ–¥–∞:", bg=self.card_color, fg=self.text_color,
                 font=self.small_font).grid(row=0, column=0, sticky="w", pady=8)
        self.color_btn = tk.Button(color_grid, text="–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç",
                                   bg=self.functions.settings["qr_fill_color"],
                                   fg="white", bd=0, font=self.small_font,
                                   command=lambda: self.functions.choose_color("fill"),
                                   padx=10, pady=5)
        self.color_btn.grid(row=0, column=1, padx=(10, 0), sticky="e", pady=8)

        tk.Label(color_grid, text="–§–æ–Ω:", bg=self.card_color, fg=self.text_color,
                 font=self.small_font).grid(row=1, column=0, sticky="w", pady=8)
        self.bg_color_btn = tk.Button(color_grid, text="–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç",
                                      bg=self.functions.settings["qr_back_color"],
                                      fg="black", bd=0, font=self.small_font,
                                      command=lambda: self.functions.choose_color("back"),
                                      padx=10, pady=5)
        self.bg_color_btn.grid(row=1, column=1, padx=(10, 0), sticky="e", pady=8)

        # –õ–æ–≥–æ—Ç–∏–ø
        logo_frame = tk.Frame(design_frame, bg=self.card_color)
        logo_frame.pack(fill="x", pady=(0, 20))

        tk.Label(logo_frame, text="–õ–û–ì–û–¢–ò–ü", bg=self.card_color, fg=self.secondary_text,
                 font=('Arial', 10, 'bold')).pack(anchor="w", pady=(0, 10))

        logo_btn_frame = tk.Frame(logo_frame, bg=self.card_color)
        logo_btn_frame.pack(fill="x")

        add_logo_btn = tk.Button(logo_btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø",
                                 bg="#2d3748", fg=self.text_color,
                                 font=self.small_font, bd=0,
                                 command=self.functions.add_logo,
                                 padx=15, pady=8)
        add_logo_btn.pack(side="left", fill="x", expand=True)

        remove_logo_btn = tk.Button(logo_btn_frame, text="–£–¥–∞–ª–∏—Ç—å",
                                    bg="#2d3748", fg=self.text_color,
                                    font=self.small_font, bd=0,
                                    command=self.functions.remove_logo,
                                    padx=15, pady=8)
        remove_logo_btn.pack(side="left", fill="x", expand=True, padx=(10, 0))

        # –†–∞–∑–º–µ—Ä
        size_frame = tk.Frame(design_frame, bg=self.card_color)
        size_frame.pack(fill="x")

        tk.Label(size_frame, text="–†–ê–ó–ú–ï–† –ò –ì–†–ê–ù–ò–¶–ê", bg=self.card_color, fg=self.secondary_text,
                 font=('Arial', 10, 'bold')).pack(anchor="w", pady=(0, 10))

        size_grid = tk.Frame(size_frame, bg=self.card_color)
        size_grid.pack(fill="x")

        tk.Label(size_grid, text="–†–∞–∑–º–µ—Ä (px):", bg=self.card_color, fg=self.text_color,
                 font=self.small_font).grid(row=0, column=0, sticky="w", pady=8)
        self.size_entry = tk.Entry(size_grid, bg="#252525", fg=self.text_color,
                                   font=self.small_font, insertbackground=self.text_color,
                                   relief="flat", bd=1, width=10)
        self.size_entry.insert(0, str(self.functions.settings["qr_size"]))
        self.size_entry.grid(row=0, column=1, padx=(10, 0), sticky="w", pady=8)

        tk.Label(size_grid, text="–ì—Ä–∞–Ω–∏—Ü–∞:", bg=self.card_color, fg=self.text_color,
                 font=self.small_font).grid(row=1, column=0, sticky="w", pady=8)
        self.border_entry = tk.Entry(size_grid, bg="#252525", fg=self.text_color,
                                     font=self.small_font, insertbackground=self.text_color,
                                     relief="flat", bd=1, width=10)
        self.border_entry.insert(0, str(self.functions.settings["qr_border"]))
        self.border_entry.grid(row=1, column=1, padx=(10, 0), sticky="w", pady=8)

        # –í–∫–ª–∞–¥–∫–∞ "–û—Å–Ω–æ–≤–Ω—ã–µ"
        basic_frame = tk.Frame(settings_notebook, bg=self.card_color)
        settings_notebook.add(basic_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ")

        # –¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        type_frame = tk.Frame(basic_frame, bg=self.card_color)
        type_frame.pack(fill="x", pady=(0, 20))

        tk.Label(type_frame, text="–¢–ò–ü –°–û–î–ï–†–ñ–ò–ú–û–ì–û", bg=self.card_color, fg=self.secondary_text,
                 font=('Arial', 10, 'bold')).pack(anchor="w", pady=(0, 10))

        self.content_type = ttk.Combobox(type_frame,
                                         values=["URL", "–¢–µ–∫—Å—Ç", "vCard", "WiFi", "Email", "SMS", "–ë–∏—Ç–∫–æ–∏–Ω"],
                                         font=self.small_font,
                                         state="readonly")
        self.content_type.set("URL")
        self.content_type.pack(fill="x")
        self.content_type.bind("<<ComboboxSelected>>", self.functions.update_content_fields)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        data_frame = tk.Frame(basic_frame, bg=self.card_color)
        data_frame.pack(fill="x", pady=(0, 20))

        tk.Label(data_frame, text="–°–û–î–ï–†–ñ–ò–ú–û–ï", bg=self.card_color, fg=self.secondary_text,
                 font=('Arial', 10, 'bold')).pack(anchor="w", pady=(0, 10))

        self.data_entry = tk.Text(data_frame, height=8, bg="#2D3748", fg=self.text_color,
                                  insertbackground=self.text_color, wrap="word",
                                  font=self.small_font, bd=1, relief="flat")
        self.data_entry.pack(fill="x")
        self.data_entry.insert("1.0", self.functions.settings["qr_data"])

        # –í–∫–ª–∞–¥–∫–∞ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
        advanced_frame = tk.Frame(settings_notebook, bg=self.card_color)
        settings_notebook.add(advanced_frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")

        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫
        error_frame = tk.Frame(advanced_frame, bg=self.card_color)
        error_frame.pack(fill="x", pady=(0, 20))

        tk.Label(error_frame, text="–ö–û–†–†–ï–ö–¶–ò–Ø –û–®–ò–ë–û–ö", bg=self.card_color, fg=self.secondary_text,
                 font=('Arial', 10, 'bold')).pack(anchor="w", pady=(0, 10))

        self.error_correction = ttk.Combobox(error_frame,
                                             values=["–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–í—ã—Å–æ–∫–∞—è", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è"],
                                             font=self.small_font,
                                             state="readonly")
        self.error_correction.set("–í—ã—Å–æ–∫–∞—è")
        self.error_correction.pack(fill="x")

        # –í–µ—Ä—Å–∏—è QR
        version_frame = tk.Frame(advanced_frame, bg=self.card_color)
        version_frame.pack(fill="x")

        tk.Label(version_frame, text="–í–ï–†–°–ò–Ø QR", bg=self.card_color, fg=self.secondary_text,
                 font=('Arial', 10, 'bold')).pack(anchor="w", pady=(0, 10))

        self.version_entry = tk.Entry(version_frame, bg="#252525", fg=self.text_color,
                                      font=self.small_font, insertbackground=self.text_color,
                                      relief="flat", bd=1)
        self.version_entry.insert(0, str(self.functions.settings["qr_version"]))
        self.version_entry.pack(fill="x")

        settings_notebook.pack(fill="both", expand=True)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = tk.Frame(settings_container, bg=self.card_color)
        action_frame.pack(fill="x", pady=(20, 0))

        generate_btn = tk.Button(action_frame, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥",
                                 bg=self.accent_color, fg="white",
                                 font=self.button_font, bd=0,
                                 command=self.functions.generate_qr,
                                 padx=20, pady=12)
        generate_btn.pack(fill="x")

        random_btn = tk.Button(action_frame, text="–°–ª—É—á–∞–π–Ω—ã–π QR",
                               bg="#2d3748", fg=self.text_color,
                               font=self.button_font, bd=0,
                               command=self.functions.generate_random_qr,
                               padx=20, pady=10)
        random_btn.pack(fill="x", pady=(10, 0))

    def setup_preview_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.preview_frame, bg=self.card_color)
        title_frame.pack(fill="x", pady=(0, 20))

        tk.Label(title_frame, text="–ü–†–ï–î–ü–†–û–°–ú–û–¢–†", bg=self.card_color,
                 fg=self.text_color, font=('Arial', 16, 'bold')).pack(side="left")

        # –û–±–ª–∞—Å—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ä–∞–º–∫–æ–π
        preview_container = tk.Frame(self.preview_frame, bg="#1a1a2e", relief="raised", bd=1)
        preview_container.pack(fill="both", expand=True)

        # –•–æ–ª—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞
        self.qr_canvas = tk.Canvas(preview_container, bg="#1a1a2e", highlightthickness=0)
        self.qr_canvas.pack(fill="both", expand=True, padx=40, pady=40)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ QR-–∫–æ–¥–µ
        info_frame = tk.Frame(self.preview_frame, bg=self.card_color)
        info_frame.pack(fill="x", pady=(20, 0))

        self.qr_info = tk.Label(info_frame, text="–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...",
                                bg=self.card_color, fg=self.secondary_text,
                                font=self.small_font, justify="left")
        self.qr_info.pack(anchor="w")

        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_frame = tk.Frame(self.preview_frame, bg=self.card_color)
        export_frame.pack(fill="x", pady=(20, 0))

        copy_btn = tk.Button(export_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä",
                             bg=self.accent_color, fg="white",
                             font=self.button_font, bd=0,
                             command=self.functions.copy_to_clipboard,
                             padx=15, pady=10)
        copy_btn.pack(side="left", fill="x", expand=True)

        export_png_btn = tk.Button(export_frame, text="–≠–∫—Å–ø–æ—Ä—Ç PNG",
                                   bg="#2d3748", fg=self.text_color,
                                   font=self.button_font, bd=0,
                                   command=self.functions.export_png,
                                   padx=15, pady=10)
        export_png_btn.pack(side="left", fill="x", expand=True, padx=(10, 0))

        export_svg_btn = tk.Button(export_frame, text="–≠–∫—Å–ø–æ—Ä—Ç SVG",
                                   bg="#2d3748", fg=self.text_color,
                                   font=self.button_font, bd=0,
                                   command=self.functions.export_svg,
                                   padx=15, pady=10)
        export_svg_btn.pack(side="left", fill="x", expand=True, padx=(10, 0))

    def setup_scan_ui(self):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.settings_frame.winfo_children():
            widget.destroy()
        for widget in self.preview_frame.winfo_children():
            widget.destroy()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.section_title.config(text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤")

        # –ü–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        scan_frame = tk.Frame(self.settings_frame, bg=self.card_color)
        scan_frame.pack(fill="both", expand=True)

        tk.Label(scan_frame, text="–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï", bg=self.card_color,
                 fg=self.text_color, font=('Arial', 16, 'bold')).pack(pady=(0, 20))

        load_btn = tk.Button(scan_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                             bg=self.accent_color, fg="white",
                             font=self.button_font, bd=0,
                             command=self.functions.load_image_for_scan,
                             padx=20, pady=12)
        load_btn.pack(fill="x", pady=(0, 20))

        # –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_status = tk.Label(scan_frame, text="–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...",
                                    bg=self.card_color, fg=self.secondary_text,
                                    font=self.small_font)
        self.scan_status.pack(anchor="w", pady=(0, 10))

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        result_frame = tk.Frame(scan_frame, bg=self.card_color)
        result_frame.pack(fill="both", expand=True)

        tk.Label(result_frame, text="–†–ï–ó–£–õ–¨–¢–ê–¢ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:", bg=self.card_color, fg=self.secondary_text,
                 font=('Arial', 10, 'bold')).pack(anchor="w", pady=(0, 10))

        result_container = tk.Frame(result_frame, bg="#1a1a2e", relief="sunken", bd=1)
        result_container.pack(fill="both", expand=True)

        self.scan_result = tk.Text(result_container, height=15, bg="#1a1a2e", fg=self.text_color,
                                   insertbackground=self.text_color, wrap="word",
                                   font=self.mono_font, bd=0, relief="flat")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(result_container, orient="vertical", command=self.scan_result.yview)
        self.scan_result.configure(yscrollcommand=scrollbar.set)

        self.scan_result.pack(side="left", fill="both", expand=True, padx=5, pady=5)
        scrollbar.pack(side="right", fill="y", pady=5)

        # –ü–∞–Ω–µ–ª—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        preview_title_frame = tk.Frame(self.preview_frame, bg=self.card_color)
        preview_title_frame.pack(fill="x", pady=(0, 20))

        tk.Label(preview_title_frame, text="–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø", bg=self.card_color,
                 fg=self.text_color, font=('Arial', 16, 'bold')).pack(side="left")

        self.scan_image_frame = tk.Frame(self.preview_frame, bg="#1a1a2e", relief="raised", bd=1)
        self.scan_image_frame.pack(fill="both", expand=True)

        self.scan_canvas = tk.Canvas(self.scan_image_frame, bg="#1a1a2e", highlightthickness=0)
        self.scan_canvas.pack(fill="both", expand=True, padx=40, pady=40)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        image_info_frame = tk.Frame(self.preview_frame, bg=self.card_color)
        image_info_frame.pack(fill="x", pady=(20, 0))

        self.image_info = tk.Label(image_info_frame, text="–†–∞–∑–º–µ—Ä: - | –§–æ—Ä–º–∞—Ç: -",
                                   bg=self.card_color, fg=self.secondary_text,
                                   font=self.small_font)
        self.image_info.pack(anchor="w")

    def show_section(self, section_name):
        self.current_section = section_name
        display_name = "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤" if section_name == "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR" else "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤"
        self.section_title.config(text=display_name)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        for btn in self.nav_buttons:
            if section_name in btn.cget("text"):
                btn.config(fg=self.accent_color, bg="#1a1a2e")
            else:
                btn.config(fg=self.secondary_text, bg=self.card_color)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
        if section_name == "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR":
            self.setup_generator_ui()
        elif section_name == "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
            self.setup_scan_ui()

    def display_qr(self, img):
        self.qr_canvas.delete("all")
        self.qr_image = ImageTk.PhotoImage(img)

        canvas_width = self.qr_canvas.winfo_width()
        canvas_height = self.qr_canvas.winfo_height()

        x = (canvas_width - self.qr_image.width()) // 2
        y = (canvas_height - self.qr_image.height()) // 2

        self.qr_canvas.create_image(x, y, image=self.qr_image, anchor="nw")

    def display_scan_image(self, img):
        self.scan_canvas.delete("all")
        img.thumbnail((400, 400))
        self.scan_img_tk = ImageTk.PhotoImage(img)

        canvas_width = self.scan_canvas.winfo_width()
        canvas_height = self.scan_canvas.winfo_height()

        x = (canvas_width - self.scan_img_tk.width()) // 2
        y = (canvas_height - self.scan_img_tk.height()) // 2

        self.scan_canvas.create_image(x, y, image=self.scan_img_tk, anchor="nw")

    def update_scan_status(self, message, is_success=True):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        color = self.success_color if is_success else self.warning_color
        self.scan_status.config(text=message, fg=color)

    def update_image_info(self, width, height, format_name):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        self.image_info.config(text=f"–†–∞–∑–º–µ—Ä: {width}x{height}px | –§–æ—Ä–º–∞—Ç: {format_name}")